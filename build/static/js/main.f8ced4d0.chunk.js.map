{"version":3,"sources":["Search.js","Result.js","NavBar.js","App.js","serviceWorker.js","index.js"],"names":["Search","react_default","a","createElement","className","id","Button","variant","onClick","this","props","handleClick","Component","Result","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","searchChangeHandler","event","performSearch","target","value","state","searchTerm","_this2","$","ajax","url","type","dataType","success","searchResults","results","movieRows","forEach","movie","poster_src","concat","poster_path","movieRow","key","title","overview","vote_average","alt","src","push","setState","rows","error","xhr","status","err","console","log","NavBar","Navbar","bg","Brand","href","handleClick2","Nav","Link","App","active","bind","assertThisInitialized","NavBar_NavBar","Search_Search","Result_Result","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f8ced4d0.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport {Button} from 'react-bootstrap';\r\nimport './search.css';\r\n\r\n\r\nexport default class Search extends Component{\r\n    render(){\r\n        return(\r\n            <div className='search' >\r\n                <div id='parent'>\r\n                    <div id='child'>\r\n                        IN THE MOOD TO CATCH A FLICK? SEE WHAT MOVIS ARE PLAYING NOW!<br/>\r\n                        <Button variant=\"warning\" onClick = {this.props.handleClick}>Show me a list of Movies!</Button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, {Component} from 'react';\r\nimport './result.css';\r\nimport $ from 'jquery';\r\n\r\nexport default class Result extends Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {}\r\n        this.performSearch()\r\n      }\r\n    \r\n    performSearch(searchTerm){\r\n      const url='https://api.themoviedb.org/3/movie/now_playing?api_key=6dfd883e9d7ba2c9f162c09626872ead&query='\r\n\r\n      $.ajax({\r\n        url: url,\r\n        type:'GET',\r\n        dataType:'JSON',\r\n        success: (searchResults) =>{\r\n          // console.log(\"good connection\", searchResults);\r\n          const results = searchResults.results;\r\n          var movieRows =[];\r\n\r\n          results.forEach((movie)=>{\r\n            const poster_src = `https://image.tmdb.org/t/p/w185${movie.poster_path}` ;\r\n            const movieRow=\r\n              <div className='movies' key={movie.id}>\r\n                <h3>{movie.title}</h3>\r\n                {movie.overview}<br/><br/>\r\n                Rating {movie.vote_average} out of 10 stars <br/> <br/>\r\n                <img alt=\"Movie Poster\" src = {poster_src}></img>\r\n                <hr/>\r\n            </div>\r\n            movieRows.push(movieRow)\r\n          })\r\n          this.setState({rows:movieRows})\r\n        },\r\n        error: (xhr, status, err) =>{\r\n          console.log(\"it failed\", err);\r\n        }\r\n      })\r\n  }\r\n    \r\n      searchChangeHandler = (event) =>{\r\n        this.performSearch(event.target.value)\r\n      }\r\n    \r\n      render() {\r\n        return (\r\n          <div className=\"results\">\r\n          <h2>Now playing at a Theater Near You:</h2>\r\n          {this.state.rows}\r\n          </div>\r\n        );\r\n      }\r\n    }","import React, {Component} from 'react';\r\nimport {Nav, Navbar} from 'react-bootstrap';\r\n\r\nexport default class NavBar extends Component{\r\n    render(){\r\n        return(\r\n            <div>\r\n                <Navbar bg=\"dark\" variant=\"dark\">\r\n                    <Navbar.Brand href=\"#home\"  onClick = {this.props.handleClick2}>The Movie Project</Navbar.Brand> {/* Passing the event handler from app.js*/}\r\n                    <Nav className=\"mr-auto\">\r\n                        <Nav.Link href=\"#home\"  onClick = {this.props.handleClick2}>Home</Nav.Link> {/* Passing the event handler from app.js*/}\r\n                    </Nav>\r\n                </Navbar>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\nimport Search from './Search';\nimport Result from './Result';\nimport NavBar from './NavBar';\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state ={\n      active : true, //used below in the return to determin which component to rener\n    }\n    this.handleClick = this.handleClick.bind(this); //passed to the search component for the button\n    this.handleClick2 = this.handleClick2.bind(this); //passed to the nav bar to be able to navigate to the home page.\n  }\n\n  // this event handler will toggle the active state from true to false an from false to true depending on current state of active.\n  // this is used mainly to get to the result page from the home page.\n  handleClick(){\n    this.setState({\n      active: !this.state.active,\n    });\n  }\n  //this event handler will toggle the active state to true regardless of the current state of active. Used in the nav bar to return \n  // to the home page\n  handleClick2(){\n    this.setState({\n      active: true\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <NavBar handleClick2={this.handleClick2}/>\n        {this.state.active && <Search handleClick={this.handleClick}/>} {/* if the state of active is true then search will render */}\n        {!this.state.active && <Result />} {/* if the state of active is false the search will render*/}\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}